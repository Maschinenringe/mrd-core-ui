import { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter } from '@angular/core';
import { AccessableFormControl } from 'mrd-core';
import * as i0 from "@angular/core";
export declare class MrdInputComponent implements AfterViewInit {
    private cdr;
    private static readonly DEFAULT_MAX_LENGTH;
    private static readonly DEFAULT_MIN_ROWS;
    private static readonly DEFAULT_MAX_ROWS;
    private static readonly DEFAULT_LINE_HEIGHT;
    textAreaElement: ElementRef<HTMLTextAreaElement>;
    formControl: AccessableFormControl;
    placeholder: string;
    value: string;
    maxLength: number;
    minRows: number;
    maxRows: number;
    lineHeight: number;
    disabled: boolean;
    readonly: boolean;
    required: boolean;
    textarea: boolean;
    centered: boolean;
    touched: EventEmitter<void>;
    focused: EventEmitter<void>;
    blurred: EventEmitter<void>;
    valueChange: EventEmitter<string>;
    constructor(cdr: ChangeDetectorRef);
    ngAfterViewInit(): void;
    input(event: InputEvent): void;
    private calculateTextAreaHeight;
    inputClicked(event: MouseEvent): void;
    focus(event: FocusEvent): void;
    blur(event: FocusEvent): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<MrdInputComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<MrdInputComponent, "mrd-input", never, { "formControl": { "alias": "formControl"; "required": false; }; "placeholder": { "alias": "placeholder"; "required": false; }; "value": { "alias": "value"; "required": false; }; "maxLength": { "alias": "maxLength"; "required": false; }; "minRows": { "alias": "minRows"; "required": false; }; "maxRows": { "alias": "maxRows"; "required": false; }; "lineHeight": { "alias": "lineHeight"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "readonly": { "alias": "readonly"; "required": false; }; "required": { "alias": "required"; "required": false; }; "textarea": { "alias": "textarea"; "required": false; }; "centered": { "alias": "centered"; "required": false; }; }, { "touched": "touched"; "focused": "focused"; "blurred": "blurred"; "valueChange": "valueChange"; }, never, never, false, never>;
    static ngAcceptInputType_maxLength: unknown;
    static ngAcceptInputType_minRows: unknown;
    static ngAcceptInputType_maxRows: unknown;
    static ngAcceptInputType_lineHeight: unknown;
    static ngAcceptInputType_disabled: unknown;
    static ngAcceptInputType_readonly: unknown;
    static ngAcceptInputType_required: unknown;
    static ngAcceptInputType_textarea: unknown;
    static ngAcceptInputType_centered: unknown;
}
