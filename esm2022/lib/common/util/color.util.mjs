export class ColorUtil {
    static isHexColor(color) {
        return /^#([A-Fa-f0-9]{8}|[A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/.test(color);
    }
    static isRgbColor(color) {
        return /^rgb\((\d{1,3}), (\d{1,3}), (\d{1,3})\)$/.test(color);
    }
    static isRgbaColor(color) {
        return /^rgba\((\d{1,3}), (\d{1,3}), (\d{1,3}), (0|1|0\.\d+)\)$/.test(color);
    }
    static hexToRgb(hex) {
        const result = /^#?([A-Fa-f\d]{2})([A-Fa-f\d]{2})([A-Fa-f\d]{2})$/i.exec(hex);
        return result ? {
            r: parseInt(result[1], 16),
            g: parseInt(result[2], 16),
            b: parseInt(result[3], 16)
        } : null;
    }
    static hexToRgba(hex) {
        if (ColorUtil.hexHasAlpha(hex)) {
            const result = /^#?([A-Fa-f\d]{2})([A-Fa-f\d]{2})([A-Fa-f\d]{2})([A-Fa-f\d]{2})$/i.exec(hex);
            return result ? {
                r: parseInt(result[1], 16),
                g: parseInt(result[2], 16),
                b: parseInt(result[3], 16),
                a: parseInt(result[4], 16) / 255
            } : null;
        }
        else {
            const result = /^#?([A-Fa-f\d]{2})([A-Fa-f\d]{2})([A-Fa-f\d]{2})$/i.exec(hex);
            return result ? {
                r: parseInt(result[1], 16),
                g: parseInt(result[2], 16),
                b: parseInt(result[3], 16),
                a: 1
            } : null;
        }
    }
    static hexHasAlpha(hex) {
        return /^#?([A-Fa-f\d]{8})$/i.test(hex);
    }
    static rgbToHex(r, g, b, a) {
        return '#' + [r, g, b].map((x) => {
            const hex = x.toString(16);
            return hex.length === 1 ? '0' + hex : hex;
        }).join('');
    }
    static rgbaToHex(r, g, b, a) {
        a = !a ? 1 : a;
        let alpha = ((a * 255) | 1 << 8).toString(16).slice(1);
        return ColorUtil.rgbToHex(r, g, b) + alpha;
    }
    static rgbStringToHex(rgb) {
        const result = /^rgb\((\d{1,3}), (\d{1,3}), (\d{1,3})\)$/.exec(rgb);
        if (result) {
            return ColorUtil.rgbToHex(parseInt(result[1], 10), parseInt(result[2], 10), parseInt(result[3], 10));
        }
        return null;
    }
    static rgbaStringToHex(rgba) {
        const result = /^rgba\((\d{1,3}), (\d{1,3}), (\d{1,3}), (0|1|0\.\d+)\)$/.exec(rgba);
        if (result) {
            return ColorUtil.rgbaToHex(parseInt(result[1], 10), parseInt(result[2], 10), parseInt(result[3], 10), parseFloat(result[4]));
        }
        return null;
    }
    static rgbaStringToRgb(rgba) {
        const result = /^rgba\((\d{1,3}), (\d{1,3}), (\d{1,3}), (0|1|0\.\d+)\)$/.exec(rgba);
        if (result) {
            return {
                r: parseInt(result[1], 10),
                g: parseInt(result[2], 10),
                b: parseInt(result[3], 10),
                a: result[4] ? parseFloat(result[4]) : 1
            };
        }
        return null;
    }
    static shouldTextBeDark(color, debug) {
        if (debug) {
            //debugger;
        }
        const rgba = ColorUtil.hexToRgba(color);
        if (rgba) {
            const { r, g, b, a } = rgba;
            const mixedColor = {
                r: r * a + (1 - a) * 255,
                g: g * a + (1 - a) * 255,
                b: b * a + (1 - a) * 255,
                a: 1
            };
            const brightness = Math.round(((mixedColor.r * 299) + (mixedColor.g * 587) + (mixedColor.b * 114)) / 1000);
            return brightness > 125;
        }
        return true;
    }
    static changeColorOpacity(color, opacity) {
        if (opacity > 1) {
            opacity /= 100;
        }
        if (ColorUtil.isRgbColor(color) || ColorUtil.isRgbaColor(color)) {
            let rgba = ColorUtil.rgbaStringToRgb(color);
            if (rgba) {
                return `rgba(${rgba.r}, ${rgba.g}, ${rgba.b}, ${rgba.a * opacity})`;
            }
            return color;
        }
        const rgb = ColorUtil.hexToRgba(color);
        if (rgb) {
            return `rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, ${rgb.a * opacity})`;
        }
        return color;
    }
    static changeColorBrightnessPercent(color, percent) {
        let rgba;
        if (ColorUtil.isRgbColor(color) || ColorUtil.isRgbaColor(color)) {
            rgba = ColorUtil.rgbaStringToRgb(color);
        }
        else {
            rgba = ColorUtil.hexToRgba(color);
        }
        if (rgba) {
            if ([rgba.r, rgba.g, rgba.b].filter((c) => c === 0 || c === 255).length === 3) {
                rgba.r = rgba.r === 0 ? 1 : rgba.r;
                rgba.g = rgba.g === 0 ? 1 : rgba.g;
                rgba.b = rgba.b === 0 ? 1 : rgba.b;
            }
            return ColorUtil.rgbToHex(Math.min(255, Math.max(0, Math.round(rgba.r * (1 + percent / 100)))), Math.min(255, Math.max(0, Math.round(rgba.g * (1 + percent / 100)))), Math.min(255, Math.max(0, Math.round(rgba.b * (1 + percent / 100)))), rgba.a);
        }
        return color;
    }
}
//# sourceMappingURL=data:application/json;base64,